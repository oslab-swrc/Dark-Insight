#!/usr/bin/env python3
# SPDX-License-Identifier: MIT
"""
Intel x86-64 architecture definition
: instruction information follows AT&T syntax
"""

# TODO -----------------------------------------------------------
#
# Following list of INT_INFO does *NOT* cover all x86 instructions.
# The first priority instructions are extracted from the BARF
# project. To make instruction complete, we should completely
# check Intel manual. Also, the following Linux Assembly site has
# pretty complete and well-organized list of x86 instructions.
#  http://linasm.sourceforge.net/docs/instructions/index.php
#
# BUT our current coverage seems okay to find spin loop. :)

from spnf.analysis.inst import *
import logging
log = logging.getLogger(__name__)

# architecture string
ARCH_STR = "elf64-x86-64"

# register infomation
# - canonicalized name, offset in bits, size in bits
regs_seg = {
    "%cs": "%cs[0:16]",
    "%ds": "%ds[0:16]",
    "%ss": "%ss[0:16]",
    "%es": "%es[0:16]",
    "%fs": "%fs[0:16]",
    "%gs": "%gs[0:16]",
}

regs_base = {
    "%rax": "%rax[0:64]",
    "%rbx": "%rbx[0:64]",
    "%rcx": "%rcx[0:64]",
    "%rdx": "%rdx[0:64]",
    "%rsi": "%rsi[0:64]",
    "%rdi": "%rdi[0:64]",
    "%rsp": "%rsp[0:64]",
    "%rbp": "%rbp[0:64]",
    "%r8": "%r8[0:64]",
    "%r9": "%r9[0:64]",
    "%r10": "%r10[0:64]",
    "%r11": "%r11[0:64]",
    "%r12": "%r12[0:64]",
    "%r13": "%r13[0:64]",
    "%r14": "%r14[0:64]",
    "%r15": "%r15[0:64]",
    "%rip": "%rip[0:64]",
    "%rflags": "%rflags[0:64]",
}

regs_base_alias = {
    "%al"   : "%rax[0:8]",
    "%ah"   : "%rax[8:8]",
    "%ax"   : "%rax[0:16]",
    "%bl"   : "%rbx[0:8]",
    "%bh"   : "%rbx[8:8]",
    "%bx"   : "%rbx[0:16]",
    "%cl"   : "%rcx[0:8]",
    "%ch"   : "%rcx[8:8]",
    "%cx"   : "%rcx[0:16]",
    "%dl"   : "%rdx[0:8]",
    "%dh"   : "%rdx[8:8]",
    "%dx"   : "%rdx[0:16]",
    "%di"   : "%rdi[0:16]",
    "%Ldi"  : "%rdi[0:8]",
    "%si"   : "%rsi[0:16]",
    "%Lsi"  : "%rsi[0:8]",
    "%sp"   : "%rsp[0:16]",
    "%Lsp"  : "%rsp[0:8]",
    "%bp"   : "%rbp[0:8]",
    "%Lbp"  : "%rbp[0:32]",
    "%eax"  : "%rax[0:32]",
    "%ebx"  : "%rbx[0:32]",
    "%ecx"  : "%rcx[0:32]",
    "%edx"  : "%rdx[0:32]",
    "%edi"  : "%rdi[0:32]",
    "%esi"  : "%rsi[0:32]",
    "%ebp"  : "%rbp[0:32]",
    "%esp"  : "%rsp[0:32]",
    "%eip"  : "%rip[0:32]",
    "%Br8"  : "%r8[0:8]",
    "%Wr8"  : "%r8[0:16]",
    "%Dr8"  : "%r8[0:32]",
    "%Br9"  : "%r9[0:8]",
    "%Wr9"  : "%r9[0:16]",
    "%Dr9"  : "%r9[0:32]",
    "%Br10" : "%r10[0:8]",
    "%Wr10" : "%r10[0:16]",
    "%Dr10" : "%r10[0:32]",
    "%Br11" : "%r11[0:8]",
    "%Wr11" : "%r11[0:16]",
    "%Dr11" : "%r11[0:32]",
    "%Br12" : "%r12[0:8]",
    "%Wr12" : "%r12[0:16]",
    "%Dr12" : "%r12[0:32]",
    "%Br13" : "%r13[0:8]",
    "%Wr13" : "%r13[0:16]",
    "%Dr13" : "%r13[0:32]",
    "%Br14" : "%r14[0:8]",
    "%Wr14" : "%r14[0:16]",
    "%Dr14" : "%r14[0:32]",
    "%Br15" : "%r15[0:8]",
    "%Wr15" : "%r15[0:16]",
    "%Dr15" : "%r15[0:32]",
 }

regs_flag_alias = {
    "%cf": "%rflags[0:1]",
    "%pf": "%rflags[2:1]",
    "%af": "%rflags[4:1]",
    "%zf": "%rflags[6:1]",
    "%sf": "%rflags[7:1]",
    "%df": "%rflags[10:1]",
    "%of": "%rflags[11:1]",
    "%flags": "%rflags[0:16]",
    "%eflags": "%rflags[0:32]",
}

regs_fpu = {
    "%st0": "%st0[0:80]",
    "%st1": "%st1[0:80]",
    "%st2": "%st2[0:80]",
    "%st3": "%st3[0:80]",
    "%st4": "%st4[0:80]",
    "%st5": "%st5[0:80]",
    "%st6": "%st6[0:80]",
    "%st7": "%st7[0:80]",
}

regs_mmx = {
    "%mm0": "%mm0[0:64]",
    "%mm1": "%mm1[0:64]",
    "%mm2": "%mm2[0:64]",
    "%mm3": "%mm3[0:64]",
    "%mm4": "%mm4[0:64]",
    "%mm5": "%mm5[0:64]",
    "%mm6": "%mm6[0:64]",
    "%mm7": "%mm7[0:64]",
}

regs_xmm = {
    "%xmm0": "%xmm0[0:128]",
    "%xmm1": "%xmm1[0:128]",
    "%xmm2": "%xmm2[0:128]",
    "%xmm3": "%xmm3[0:128]",
    "%xmm4": "%xmm4[0:128]",
    "%xmm5": "%xmm5[0:128]",
    "%xmm6": "%xmm6[0:128]",
    "%xmm7": "%xmm7[0:128]",
    "%xmm8": "%xmm8[0:128]",
    "%xmm9": "%xmm9[0:128]",
    "%Axmm": "%Axmm[0:128]",
    "%Bxmm": "%Bxmm[0:128]",
    "%Cxmm": "%Cxmm[0:128]",
    "%Dxmm": "%Dxmm[0:128]",
    "%Exmm": "%Exmm[0:128]",
    "%Fxmm": "%Fxmm[0:128]",
}

regs_ymm = {
    "%ymm0": "%ymm0[0:256]",
    "%ymm1": "%ymm1[0:256]",
    "%ymm2": "%ymm2[0:256]",
    "%ymm3": "%ymm3[0:256]",
    "%ymm4": "%ymm4[0:256]",
    "%ymm5": "%ymm5[0:256]",
    "%ymm6": "%ymm6[0:256]",
    "%ymm7": "%ymm7[0:256]",
    "%ymm8": "%ymm8[0:256]",
    "%ymm9": "%ymm9[0:256]",
    "%Aymm": "%Aymm[0:256]",
    "%Bymm": "%Bymm[0:256]",
    "%Cymm": "%Cymm[0:256]",
    "%Dymm": "%Dymm[0:256]",
    "%Eymm": "%Eymm[0:256]",
    "%Fymm": "%Fymm[0:256]",
}

regs_debug = {
    "%dr0": "%dr0[0:32]",
    "%dr1": "%dr1[0:32]",
    "%dr2": "%dr2[0:32]",
    "%dr3": "%dr3[0:32]",
    "%dr4": "%dr4[0:32]",
    "%dr5": "%dr5[0:32]",
    "%dr6": "%dr6[0:32]",
    "%dr7": "%dr7[0:32]",
}

regs_control = {
    "%cr0": "%cr0[0:32]",
    "%cr1": "%cr1[0:32]",
    "%cr2": "%cr2[0:32]",
    "%cr3": "%cr3[0:32]",
    "%cr4": "%cr4[0:32]",
}

regs_list = [
    regs_seg,
    regs_base,
    regs_base_alias,
    regs_flag_alias,
    regs_fpu,
    regs_mmx,
    regs_xmm,
    regs_ymm,
    regs_debug,
    regs_control,
]

REG_INFO = dict((k, v) for d in regs_list for k, v in d.items())

IP_REGS = set([
    "%rip",
    "%eip",
])

THREAD_LOCAL_REGS = set([
    "%fs",
])

STATUS_FLAG_REGS = set([
    "%rflags",
    "%eflags",
    "%flags",
    "%cf",
    "%pf",
    "%af",
    "%zf",
    "%sf",
    "%df",
    "%of",
])

REG_RENAME_TBL = {
    "%dil"  : "%Ldi",
    "%sil"  : "%Lsi",
    "%spl"  : "%Lsp",
    "%bpl"  : "%Lbp",
    "%r8b"  : "%Br8",
    "%r8w"  : "%Wr8",
    "%r8d"  : "%Dr8",
    "%r9b"  : "%Br9",
    "%r9w"  : "%Wr9",
    "%r9d"  : "%Dr9",
    "%r10b" : "%Br10",
    "%r10w" : "%Wr10",
    "%r10d" : "%Dr10",
    "%r11b" : "%Br11",
    "%r11w" : "%Wr11",
    "%r11d" : "%Dr11",
    "%r12b" : "%Br12",
    "%r12w" : "%Wr12",
    "%r12d" : "%Dr12",
    "%r13b" : "%Br13",
    "%r13w" : "%Wr13",
    "%r13d" : "%Dr13",
    "%r14b" : "%Br14",
    "%r14w" : "%Wr14",
    "%r14d" : "%Dr14",
    "%r15b" : "%Br15",
    "%r15w" : "%Wr15",
    "%r15d" : "%Dr15",
    "%xmm10": "%Axmm",
    "%xmm11": "%Bxmm",
    "%xmm12": "%Cxmm",
    "%xmm13": "%Dxmm",
    "%xmm14": "%Exmm",
    "%xmm15": "%Fxmm",
    "%ymm10": "%Aymm",
    "%ymm11": "%Bymm",
    "%ymm12": "%Cymm",
    "%ymm13": "%Dymm",
    "%ymm14": "%Eymm",
    "%ymm15": "%Fymm",
}

# instruction prefix
PREFIX_SET = set([
    "lock",
    "rep",
    "repe",
    "repz",
    "repne",
    "repnz",
    "xacquire",
    "xrelease",
    "lock.atomic",
    "lock.atomic.jne.likely",
    "lock.atomic.je.unlikely",
])

# - instruction type, read set, write set, conditional write set
# '#n'     -> n-th operand
# '(#n)'   -> *(n-th operand)
# '(%reg)' -> *(%reg)
# '#u'     -> unknown (or fcall)
# '#ur'    -> unknown due to recursion
# '^N'     -> sub-address

# - indirect memory access
#   - displacement(base register, offset register, multiplier)
#     -> *(base register + (offset register * multiplier) + displacement)
#   - displacement<base register, offset register, multiplier>
#     -> (base register + (offset register * multiplier) + displacement)

# - instruction type, read set, write set, conditional write set
# - Follow x86_64-Linux-gcc calling convention
#    * %rax, %rdx: return value
#    * %rdi, %rsi, %rdx, %rcx, %r8, %r9: parameters
#      We conservatively assume that all memory based on
#      argument registers are changed as well.

# It assumes that
#  - all potential arguments are pointers and
#  - data pointed by the addresses are modified by the callee and
#  - returns 16 bytes.
_insts_fcall_conservative = {
    "call":     (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx", "(%rdi)", "(%rsi)", "(%rdx)", "(%rcx)", "(%r8)", "(%r9)", "(%rsp)"])),
    "callq":    (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx", "(%rdi)", "(%rsi)", "(%rdx)", "(%rcx)", "(%r8)", "(%r9)", "(%rsp)"])),
    "syscall":  (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx", "(%rdi)", "(%rsi)", "(%rdx)", "(%rcx)", "(%r8)", "(%r9)", "(%rsp)"])),
    "sysenter": (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx", "(%rdi)", "(%rsi)", "(%rdx)", "(%rcx)", "(%r8)", "(%r9)", "(%rsp)"])),
}

# It assumes that
#  - none of arguments are modified by the callee and
#  - returns 16 bytes.
_insts_fcall_optimistic = {
    "call":     (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx"])),
    "callq":    (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx"])),
    "syscall":  (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx"])),
    "sysenter": (InstKind.fcall, set(["#u"]), set(["%rax", "%rdx"])),
}

insts_fcall = _insts_fcall_optimistic

insts_fcall_syscall = {
    # int sched_yield(void)
    "call#sched_yield@plt":      (InstKind.fcall, set(["#u"]), set(["%eax"])),
    "callq#sched_yield@plt":     (InstKind.fcall, set(["#u"]), set(["%eax"])),
    # int usleep(useconds_t usec)
    "call#usleep@plt":           (InstKind.fcall, set(["#u"]), set(["%eax"])),
    "callq#usleep@plt":          (InstKind.fcall, set(["#u"]), set(["%eax"])),
    # unsigned int sleep(unsigned int seconds)
    "call#sleep@plt":            (InstKind.fcall, set(["#u"]), set(["%eax"])),
    "callq#sleep@plt":           (InstKind.fcall, set(["#u"]), set(["%eax"])),
    # int nanosleep(const struct timespec *req, struct timespec *rem)
    "call#nanosleep@plt":        (InstKind.fcall, set(["#u"]), set(["%eax", "(%rsi)"])),
    "callq#nanoslee@plt":        (InstKind.fcall, set(["#u"]), set(["%eax", "(%rsi)"])),
    # int clock_nanosleep(clockid_t clock_id, int flags,
    #                     const struct timespec *request,
    #                     struct timespec *remain)
    "call#clock_nanosleep@plt":  (InstKind.fcall, set(["#u"]), set(["%eax", "(%rcx)"])),
    "callq#clock_nanosleep@plt": (InstKind.fcall, set(["#u"]), set(["%eax", "(%rcx)"])),
}

# - instruction type, read set, write set, conditional write set
insts_freturn = {
    "ret": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "retq": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "iret": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "iretd": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "iretq": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "sysret": (InstKind.freturn, set("0x0(%rsp)"), set()),
    "sysexit": (InstKind.freturn, set("0x0(%rsp)"), set()),
}

# - instruction type, read set, write set, conditional write set
insts_ujump = {
    "jmp": (InstKind.ujump, set(), set()),
    "jmpb": (InstKind.ujump, set(), set()),
    "jmpw": (InstKind.ujump, set(), set()),
    "jmpl": (InstKind.ujump, set(), set()),
    "jmpq": (InstKind.ujump, set(), set()),
}

# - instruction type, read set, write set, conditional write set
insts_cjump = {
    "ja": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "ja,pn": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "ja,pt": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jae": (InstKind.cjump, set(["%cf"]), set()),
    "jae,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jae,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jb": (InstKind.cjump, set(["%cf"]), set()),
    "jb,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jb,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jbe": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jbe,pn": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jbe,pt": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jc": (InstKind.cjump, set(["%cf"]), set()),
    "jc,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jc,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jcxz": (InstKind.cjump, set(["%cx"]), set()),
    "jcxz,pn": (InstKind.cjump, set(["%cx"]), set()),
    "jcxz,pt": (InstKind.cjump, set(["%cx"]), set()),
    "jecxz": (InstKind.cjump, set(["%ecx"]), set()),
    "jecxz,pn": (InstKind.cjump, set(["%ecx"]), set()),
    "jecxz,pt": (InstKind.cjump, set(["%ecx"]), set()),
    "jrcxz": (InstKind.cjump, set(["%rcx"]), set()),
    "jrcxz,pn": (InstKind.cjump, set(["%rcx"]), set()),
    "jrcxz,pt": (InstKind.cjump, set(["%rcx"]), set()),
    "je": (InstKind.cjump, set(["%zf"]), set()),
    "je,pn": (InstKind.cjump, set(["%zf"]), set()),
    "je,pt": (InstKind.cjump, set(["%zf"]), set()),
    "jg": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jg,pn": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jg,pt": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jge": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jge,pn": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jge,pt": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jl": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jl,pn": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jl,pt": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jle": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jle,pn": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jle,pt": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jna": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jna,pn": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jna,pt": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jnae": (InstKind.cjump, set(["%cf"]), set()),
    "jnae,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jnae,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jnb": (InstKind.cjump, set(["%cf"]), set()),
    "jnb,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jnb,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jnbe": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jnbe,pn": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jnbe,pt": (InstKind.cjump, set(["%cf", "%zf"]), set()),
    "jnc": (InstKind.cjump, set(["%cf"]), set()),
    "jnc,pn": (InstKind.cjump, set(["%cf"]), set()),
    "jnc,pt": (InstKind.cjump, set(["%cf"]), set()),
    "jne": (InstKind.cjump, set(["%zf"]), set()),
    "jne,pn": (InstKind.cjump, set(["%zf"]), set()),
    "jne,pt": (InstKind.cjump, set(["%zf"]), set()),
    "jng": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jng,pn": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jng,pt": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jnge": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnge,pn": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnge,pt": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnl": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnl,pn": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnl,pt": (InstKind.cjump, set(["%sf", "%of"]), set()),
    "jnle": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jnle,pn": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jnle,pt": (InstKind.cjump, set(["%zf", "%sf", "%of"]), set()),
    "jno": (InstKind.cjump, set(["%of"]), set()),
    "jno,pn": (InstKind.cjump, set(["%of"]), set()),
    "jno,pt": (InstKind.cjump, set(["%of"]), set()),
    "jnp": (InstKind.cjump, set(["%pf"]), set()),
    "jnp,pn": (InstKind.cjump, set(["%pf"]), set()),
    "jnp,pt": (InstKind.cjump, set(["%pf"]), set()),
    "jns": (InstKind.cjump, set(["%sf"]), set()),
    "jns,pn": (InstKind.cjump, set(["%sf"]), set()),
    "jns,pt": (InstKind.cjump, set(["%sf"]), set()),
    "jnz": (InstKind.cjump, set(["%zf"]), set()),
    "jnz,pn": (InstKind.cjump, set(["%zf"]), set()),
    "jnz,pt": (InstKind.cjump, set(["%zf"]), set()),
    "jo": (InstKind.cjump, set(["%of"]), set()),
    "jo,pn": (InstKind.cjump, set(["%of"]), set()),
    "jo,pt": (InstKind.cjump, set(["%of"]), set()),
    "jp": (InstKind.cjump, set(["%pf"]), set()),
    "jp,pn": (InstKind.cjump, set(["%pf"]), set()),
    "jp,pt": (InstKind.cjump, set(["%pf"]), set()),
    "jpe": (InstKind.cjump, set(["%pf"]), set()),
    "jpe,pn": (InstKind.cjump, set(["%pf"]), set()),
    "jpe,pt": (InstKind.cjump, set(["%pf"]), set()),
    "jpo": (InstKind.cjump, set(["%pf"]), set()),
    "jpo,pn": (InstKind.cjump, set(["%pf"]), set()),
    "jpo,pt": (InstKind.cjump, set(["%pf"]), set()),
    "js": (InstKind.cjump, set(["%sf"]), set()),
    "js,pn": (InstKind.cjump, set(["%sf"]), set()),
    "js,pt": (InstKind.cjump, set(["%sf"]), set()),
    "jz": (InstKind.cjump, set(["%zf"]), set()),
    "jz,pn": (InstKind.cjump, set(["%zf"]), set()),
    "jz,pt": (InstKind.cjump, set(["%zf"]), set()),
    "loop": (InstKind.cjump, set(["%rcx"]), set(["%rcx"])),
    "loope": (InstKind.cjump, set(["%rcx", "%zf"]), set(["%rcx"])),
    "loopz": (InstKind.cjump, set(["%rcx", "%zf"]), set(["%rcx"])),
    "loopne": (InstKind.cjump, set(["%rcx", "%zf"]), set(["%rcx"])),
    "loopnz": (InstKind.cjump, set(["%rcx", "%zf"]), set(["%rcx"])),
}

insts_other_arithmetic = {
    "adc": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "adcb": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "adcw": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "adcl": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "adcq": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "adcx": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf"])),
    "adcxb": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf"])),
    "adcxw": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf"])),
    "adcxl": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf"])),
    "adcxq": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf"])),

    "sbb": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "sbbb": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "sbbw": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "sbbl": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "sbbq": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "mul": (InstKind.other, set(["#0", "%al", "%ax", "%eax", "%rax"]), set(["#0", "%of", "%cf"])),
    "mulb": (InstKind.other, set(["#0", "%al"]), set(["#0", "%of", "%cf"])),
    "mulw": (InstKind.other, set(["#0", "%ax"]), set(["#0", "%of", "%cf"])),
    "mull": (InstKind.other, set(["#0", "%eax"]), set(["#0", "%of", "%cf"])),
    "mulq": (InstKind.other, set(["#0", "%rax"]), set(["#0", "%of", "%cf"])),
    "imul1": (InstKind.other, set(["#0", "%al", "%ax", "%eax", "%rax"]), set(["%rdx", "%rax", "%edx", "%eax", "%dx", "%ax", "%of", "%cf"])),
    "imul1b": (InstKind.other, set(["#0", "%al"]), set(["%ax", "%of", "%cf"])),
    "imul1w": (InstKind.other, set(["#0", "%ax"]), set(["%dx", "%ax", "%of", "%cf"])),
    "imul1l": (InstKind.other, set(["#0", "%eax"]), set(["%edx", "%eax", "%of", "%cf"])),
    "imul1q": (InstKind.other, set(["#0", "%rax"]), set(["%rdx", "%rax", "%of", "%cf"])),
    "imul2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of", "%cf"])),
    "imul2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of", "%cf"])),
    "imul2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of", "%cf"])),
    "imul2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of", "%cf"])),
    "imul2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of", "%cf"])),
    "imul3": (InstKind.other, set(["#0", "#1"]), set(["#2", "%of", "%cf"])),
    "imul3b": (InstKind.other, set(["#0", "#1"]), set(["#2", "%of", "%cf"])),
    "imul3w": (InstKind.other, set(["#0", "#1"]), set(["#2", "%of", "%cf"])),
    "imul3l": (InstKind.other, set(["#0", "#1"]), set(["#2", "%of", "%cf"])),
    "imul3q": (InstKind.other, set(["#0", "#1"]), set(["#2", "%of", "%cf"])),
    "div": (InstKind.other, set(["#0", "%rdx", "%rax", "%edx", "%eax", "%dx", "%ax"]), set(["%rdx", "%rax", "%edx", "%eax", "%dx", "%ax"])),
    "divb": (InstKind.other, set(["#0", "%ax"]), set(["%ax"])),
    "divw": (InstKind.other, set(["#0", "%dx", "%ax"]), set(["%dx", "%ax"])),
    "divl": (InstKind.other, set(["#0", "%edx", "%eax"]), set(["%edx", "%eax"])),
    "divq": (InstKind.other, set(["#0", "%rdx", "%rax"]), set(["%rdx", "%rax"])),
    "idiv": (InstKind.other, set(["#0", "%rdx", "%rax", "%edx", "%eax", "%dx", "%ax"]), set(["%rdx", "%rax", "%edx", "%eax", "%dx", "%ax"])),
    "idivb": (InstKind.other, set(["#0", "%ax"]), set(["%ax"])),
    "idivw": (InstKind.other, set(["#0", "%dx", "%ax"]), set(["%dx", "%ax"])),
    "idivl": (InstKind.other, set(["#0", "%edx", "%eax"]), set(["%edx", "%eax"])),
    "idivq": (InstKind.other, set(["#0", "%rdx", "%rax"]), set(["%rdx", "%rax"])),
    "inc": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "incb": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "incw": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "incl": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "incq": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "dec": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "decb": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "decw": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "decl": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "decq": (InstKind.other, set(["#0"]), set(["#0", "%of", "%sf", "%zf", "%af", "%pf"])),
    "neg": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "negb": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "negw": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "negl": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "negq": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmp": (InstKind.other, set(["#0", "#1"]), set(["%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpb": (InstKind.other, set(["#0", "#1"]), set(["%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpw": (InstKind.other, set(["#0", "#1"]), set(["%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpl": (InstKind.other, set(["#0", "#1"]), set(["%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpq": (InstKind.other, set(["#0", "#1"]), set(["%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "and": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "andb": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "andw": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "andl": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "andq": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "or": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "orb": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "orw": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "orl": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "orq": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "xor": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "xorb": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "xorw": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "xorl": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "xorq": (InstKind.other, set(["#0", "#1"]), set(["#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "not": (InstKind.other, set(["#0"]), set(["#0"])),
    "notb": (InstKind.other, set(["#0"]), set(["#0"])),
    "notw": (InstKind.other, set(["#0"]), set(["#0"])),
    "notl": (InstKind.other, set(["#0"]), set(["#0"])),
    "notq": (InstKind.other, set(["#0"]), set(["#0"])),
    "xadd": (InstKind.other, set(["#0", "#1"]), set(["#0", "#1", "%cf", "%pf", "%af", "%sf", "%zf", "%of"])),
    "xaddb": (InstKind.other, set(["#0", "#1"]), set(["#0", "#1", "%cf", "%pf", "%af", "%sf", "%zf", "%of"])),
    "xaddw": (InstKind.other, set(["#0", "#1"]), set(["#0", "#1", "%cf", "%pf", "%af", "%sf", "%zf", "%of"])),
    "xaddl": (InstKind.other, set(["#0", "#1"]), set(["#0", "#1", "%cf", "%pf", "%af", "%sf", "%zf", "%of"])),
    "xaddq": (InstKind.other, set(["#0", "#1"]), set(["#0", "#1", "%cf", "%pf", "%af", "%sf", "%zf", "%of"])),
}

insts_other_shift_rotate = {
    "shr1": (InstKind.other, set(["#0"]), set(["#0"])),
    "shr1b": (InstKind.other, set(["#0"]), set(["#0"])),
    "shr1w": (InstKind.other, set(["#0"]), set(["#0"])),
    "shr1l": (InstKind.other, set(["#0"]), set(["#0"])),
    "shr1q": (InstKind.other, set(["#0"]), set(["#0"])),
    "shl1": (InstKind.other, set(["#0"]), set(["#0", "%of"])),
    "shl1b": (InstKind.other, set(["#0"]), set(["#0", "%of"])),
    "shl1w": (InstKind.other, set(["#0"]), set(["#0", "%of"])),
    "shl1l": (InstKind.other, set(["#0"]), set(["#0", "%of"])),
    "shl1q": (InstKind.other, set(["#0"]), set(["#0", "%of"])),
    "sal1": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sal1b": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sal1w": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sal1l": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sal1q": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sar1": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sar1b": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sar1w": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sar1l": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "sar1q": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "shr2": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "shr2b": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "shr2w": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "shr2l": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "shr2q": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "shl2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of"])),
    "shl2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of"])),
    "shl2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of"])),
    "shl2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of"])),
    "shl2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%of"])),
    "sal2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sal2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sal2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sal2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sal2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sar2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sar2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sar2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sar2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "sar2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "shr3d": (InstKind.other, set(["#0", "#1"]), set(["#2", "%cf", "%sf", "%zf", "%pf", "%of"])),
    "shl3d": (InstKind.other, set(["#0", "#1"]), set(["#2", "%cf", "%sf", "%zf", "%pf", "%of"])),
    "sarx": (InstKind.other, set(["#0", "#1"]), set(["#2"])),
    "shlx": (InstKind.other, set(["#0", "#1"]), set(["#2"])),
    "shrx": (InstKind.other, set(["#0", "#1"]), set(["#2"])),
    "rcl1": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcl1b": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcl1w": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcl1l": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcl1q": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcr1": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcr1b": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcr1w": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcr1l": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rcr1q": (InstKind.other, set(["#0", "%cf"]), set(["#0", "%cf", "%of"])),
    "rol1": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "rol1b": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "rol1w": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "rol1l": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "rol1q": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "ror1": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "ror1b": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "ror1w": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "ror1l": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "ror1q": (InstKind.other, set(["#0"]), set(["#0", "%cf", "%of"])),
    "rcl2": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcl2b": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcl2w": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcl2l": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcl2q": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcr2": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcr2b": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcr2w": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcr2l": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rcr2q": (InstKind.other, set(["#0", "#1", "%cf"]), set(["#1", "%cf", "%of"])),
    "rol2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "rol2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "rol2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "rol2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "rol2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "ror2": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "ror2b": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "ror2w": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "ror2l": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
    "ror2q": (InstKind.other, set(["#0", "#1"]), set(["#1", "%cf", "%of"])),
}

insts_other_bit_byte = {
    "popcnt": (InstKind.other, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "popcntb": (InstKind.other, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "popcntw": (InstKind.other, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "popcntl": (InstKind.other, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "popcntq": (InstKind.other, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "test": (InstKind.other, set(["#0", "#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "testb": (InstKind.other, set(["#0", "#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "testw": (InstKind.other, set(["#0", "#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "testl": (InstKind.other, set(["#0", "#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "testq": (InstKind.other, set(["#0", "#1"]), set(["%of", "%cf", "%sf", "%zf", "%pf"])),
    "bt": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btb": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btw": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btl": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btq": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btc": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btcb": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btcw": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btcl": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btcq": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btr": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btrb": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btrw": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btrl": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btrq": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "bts": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btsb": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btsw": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btsl": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "btsq": (InstKind.other, set(["#0", "#1"]), set(["%cf"])),
    "bsf": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsfb": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsfw": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsfl": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsfq": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsr": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsrb": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsrw": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsrl": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "bsrq": (InstKind.other, set(["#0"]), set(["#1", "%zf"])),
    "tzcnt": (InstKind.other, set(["#0"]), set(["#1", "%zf", "%cf"])),
}

insts_other_string = {
    "lods": (InstKind.other, set(["0x(%rsi)"]), set(["%rsi", "%al", "%ax", "%eax", "%rax"])),
    "lodsb": (InstKind.other, set(["0x(%rsi)"]), set(["%rsi", "%al"])),
    "lodsw": (InstKind.other, set(["0x(%rsi)"]), set(["%rsi", "%ax"])),
    "lodsd": (InstKind.other, set(["0x(%rsi)"]), set(["%rsi", "%eax"])),
    "lodsq": (InstKind.other, set(["0x(%rsi)"]), set(["%rsi", "%rax"])),
    "stos": (InstKind.other, set(["%al", "%ax", "%eax", "%rax"]), set(["0x(%rdi)", "%rdi"])),
    "stosb": (InstKind.other, set(["%al"]), set(["0x(%rdi)", "%rdi"])),
    "stosw": (InstKind.other, set(["%ax"]), set(["0x(%rdi)", "%rdi"])),
    "stosd": (InstKind.other, set(["%eax"]), set(["0x(%rdi)", "%rdi"])),
    "stosq": (InstKind.other, set(["%rax"]), set(["0x(%rdi)", "%rdi"])),
    "movs": (InstKind.other, set(["(%rsi)"]), set(["(%rdi)", "%rdi", "%rdi"])),
    "movsb": (InstKind.other, set(["(%rsi)"]), set(["(%rdi)", "%rdi", "%rdi"])),
    "movsw": (InstKind.other, set(["(%rsi)"]), set(["(%rdi)", "%rdi", "%rdi"])),
    "movsd": (InstKind.other, set(["(%rsi)"]), set(["(%rdi)", "%rdi", "%rdi"])),
    "movsq": (InstKind.other, set(["(%rsi)"]), set(["(%rdi)", "%rdi", "%rdi"])),
    "cmps": (InstKind.other, set(["(%rsi)", "(%rdi)"]), set(["%rsi", "%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpsb": (InstKind.other, set(["(%rsi)", "(%rdi)"]), set(["%rsi", "%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpsw": (InstKind.other, set(["(%rsi)", "(%rdi)"]), set(["%rsi", "%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpsd": (InstKind.other, set(["(%rsi)", "(%rdi)"]), set(["%rsi", "%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "cmpsq": (InstKind.other, set(["(%rsi)", "(%rdi)"]), set(["%rsi", "%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "scas": (InstKind.other, set(["%al", "%ax", "%eax", "%rax", "(%rdi)"]), set(["%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "scasb": (InstKind.other, set(["%al", "(%rdi)"]), set(["%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "scasw": (InstKind.other, set(["%ax", "(%rdi)"]), set(["%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "scasd": (InstKind.other, set(["%eax", "(%rdi)"]), set(["%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
    "scasq": (InstKind.other, set(["%rax", "(%rdi)"]), set(["%rdi", "%cf", "%of", "%sf", "%zf", "%af", "%pf"])),
}

insts_other_flags = {
    "clc": (InstKind.other, set(), set(["%cf"])),
    "cld": (InstKind.other, set(), set(["df"])),
    "cli": (InstKind.other, set(), set(["if"])),
    "stc": (InstKind.other, set(), set(["%cf"])),
    "std": (InstKind.other, set(), set(["df"])),
    "sti": (InstKind.other, set(), set(["if"])),
    "sahf": (InstKind.other, set(["ah"]), set(["%sf", "%zf", "%af", "%pf", "%cf"])),
}

insts_other_no_side_effect = {
    "prefetch": (InstKind.other, set(), set()),
    "prefetchw": (InstKind.other, set(), set()),
    "prefetchnta": (InstKind.other, set(), set()),
    "prefetcht0": (InstKind.other, set(), set()),
    "prefetcht1": (InstKind.other, set(), set()),
    "prefetcht2": (InstKind.other, set(), set()),
    "prefetch0": (InstKind.other, set(), set()),
    "prefetch1": (InstKind.other, set(), set()),
    "prefetch2": (InstKind.other, set(), set()),
    "clflush": (InstKind.other, set(), set()),
    "clflushopt": (InstKind.other, set(), set()),
    "pause": (InstKind.other, set(), set()),
    "sfence": (InstKind.other, set(), set()),
    "lfence": (InstKind.other, set(), set()),
    "mfence": (InstKind.other, set(), set()),
}

insts_simple_move = {
    "mov": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movabs": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movb": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movq2dq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsbw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsbl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsbq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movswl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movswq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzbw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzbl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzbq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzwl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzwq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movshdup": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsldup": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movss": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsx": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsxd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movslw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movslq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movsxd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzx": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzbl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzbw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzwl": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movzb": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movapd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movaps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movbe": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movddup": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movdqa": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqa": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqa32": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqa64": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movdqu": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqu": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqu8": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqu16": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqu32": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovdqu64": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "vmovntdq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movdq2q": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movhlps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movhpd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movhps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movlhps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movlpd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movlps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movmskpd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movmskps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movntdqa": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movntdq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movnti": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movntpd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movntps": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movntq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movupd": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "movups": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "lea": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "leaw": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "leal": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "leaq": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "lea,meta": (InstKind.simple_mov, set(["#0"]), set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"])),
    "bndmov": (InstKind.simple_mov, set(["#0"]), set(["#1"])),
    "xchg": (InstKind.simple_mov, set(["#0", "#1"]), set(["#0", "#1"])),
    "xchgb": (InstKind.simple_mov, set(["#0", "#1"]), set(["#0", "#1"])),
    "xchgw": (InstKind.simple_mov, set(["#0", "#1"]), set(["#0", "#1"])),
    "xchgl": (InstKind.simple_mov, set(["#0", "#1"]), set(["#0", "#1"])),
    "xchgq": (InstKind.simple_mov, set(["#0", "#1"]), set(["#0", "#1"])),
    "seta": (InstKind.simple_mov, set(["%cf", "%zf"]), set(["#0"])),
    "setae": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "setb": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "setbe": (InstKind.simple_mov, set(["%cf", "%zf"]), set(["#0"])),
    "setc": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "sete": (InstKind.simple_mov, set(["%zf"]), set(["#0"])),
    "setg": (InstKind.simple_mov, set(["%zf", "%sf", "%of"]), set(["#0"])),
    "setge": (InstKind.simple_mov, set(["%sf", "%of"]), set(["#0"])),
    "setl": (InstKind.simple_mov, set(["%sf", "%of"]), set(["#0"])),
    "setle": (InstKind.simple_mov, set(["%zf", "%sf", "%of"]), set(["#0"])),
    "setna": (InstKind.simple_mov, set(["%cf", "%zf"]), set(["#0"])),
    "setnae": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "setnb": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "setnbe": (InstKind.simple_mov, set(["%cf", "%zf"]), set(["#0"])),
    "setnc": (InstKind.simple_mov, set(["%cf"]), set(["#0"])),
    "setne": (InstKind.simple_mov, set(["%zf"]), set(["#0"])),
    "setng": (InstKind.simple_mov, set(["%zf", "%sf", "%of"]), set(["#0"])),
    "setnge": (InstKind.simple_mov, set(["%sf", "%of"]), set(["#0"])),
    "setnl": (InstKind.simple_mov, set(["%sf", "%of"]), set(["#0"])),
    "setnle": (InstKind.simple_mov, set(["%zf", "%sf", "%of"]), set(["#0"])),
    "setno": (InstKind.simple_mov, set(["%of"]), set(["#0"])),
    "setnp": (InstKind.simple_mov, set(["%pf"]), set(["#0"])),
    "setns": (InstKind.simple_mov, set(["%sf"]), set(["#0"])),
    "setnz": (InstKind.simple_mov, set(["%zf"]), set(["#0"])),
    "seto": (InstKind.simple_mov, set(["%of"]), set(["#0"])),
    "setp": (InstKind.simple_mov, set(["%pf"]), set(["#0"])),
    "setpe": (InstKind.simple_mov, set(["%pf"]), set(["#0"])),
    "setpo": (InstKind.simple_mov, set(["%pf"]), set(["#0"])),
    "sets": (InstKind.simple_mov, set(["%sf"]), set(["#0"])),
    "setz": (InstKind.simple_mov, set(["%zf"]), set(["#0"])),
}

insts_other_data_transfer = {
    "bswap": (InstKind.other, set(["#0"]), set(["#0"])),
    "bswapl": (InstKind.other, set(["#0"]), set(["#0"])),
    "bswapq": (InstKind.other, set(["#0"]), set(["#0"])),
    "cbw": (InstKind.other, set(["%al"]), set(["%ax"])),
    "cbtw": (InstKind.other, set(["%al"]), set(["%ax"])),
    "cwde": (InstKind.other, set(["%ax"]), set(["%eax"])),
    "cwtl": (InstKind.other, set(["%ax"]), set(["%eax"])),
    "cwd": (InstKind.other, set(["%ax"]), set(["%dx", "%ax"])),
    "cwtd": (InstKind.other, set(["%ax"]), set(["%dx", "%ax"])),
    "cdq": (InstKind.other, set(["%eax"]), set(["%edx", "%eax"])),
    "cltd": (InstKind.other, set(["%eax"]), set(["%edx", "%eax"])),
    "cdqe": (InstKind.other, set(["%eax"]), set(["%rax"])),
    "cltq": (InstKind.other, set(["%eax"]), set(["%rax"])),
    "cqto": (InstKind.other, set(["%rax"]), set(["%rdx", "%rax"])),
    "cdo": (InstKind.other, set(["%rax"]), set(["%rdx", "%rax"])),
    "pop": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["#0", "%rsp"])),
    "popw": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["#0", "%rsp"])),
    "popl": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["#0", "%rsp"])),
    "popq": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["#0", "%rsp"])),
    "popa": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["%rsp", "%di", "%si", "%bp", "%bx", "%dx", "%cx", "%ax"])),
    "popad": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["%rsp", "%edi", "%esi", "%ebp", "%ebx", "%edx", "%ecx", "%eax"])),
    "popf": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["%flags", "%rsp"])),
    "popfd": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["%eflags", "%rsp"])),
    "popfq": (InstKind.other, set(["%rsp", "0x0(%rsp)"]), set(["%rflags", "%rsp"])),
    "push": (InstKind.other, set(["#0", "%rsp"]), set(["0x0(%rsp)", "%rsp"])),
    "pushw": (InstKind.other, set(["#0", "%rsp"]), set(["0x0(%rsp)", "%rsp"])),
    "pushl": (InstKind.other, set(["#0", "%rsp"]), set(["0x0(%rsp)", "%rsp"])),
    "pushq": (InstKind.other, set(["#0", "%rsp"]), set(["0x0(%rsp)", "%rsp"])),
    "pusha": (InstKind.other, set(["%rsp", "%di", "%si", "%bp", "%bx", "%dx", "%cx", "%ax"]), set(["0x0(%rsp)", "%rsp"])),
    "pushad": (InstKind.other, set(["%rsp", "%edi", "%esi", "%ebp", "%ebx", "%edx", "%ecx", "%eax"]), set(["0x0(%rsp)", "%rsp"])),
    "pushf": (InstKind.other, set(["%flags", "%rsp"]), set(["%rsp", "0x0(%rsp)"])),
    "pushfd": (InstKind.other, set(["%eflags", "%rsp"]), set(["%rsp", "0x0(%rsp)"])),
    "pushfq": (InstKind.other, set(["%rflags", "%rsp"]), set(["%rsp", "0x0(%rsp)"])),
}

insts_other_misc = {
    "nop": (InstKind.other, set(), set()),
    "nopb": (InstKind.other, set(), set()),
    "nopw": (InstKind.other, set(), set()),
    "nopl": (InstKind.other, set(), set()),
    "rdpid": (InstKind.other, set(), set(["%eax"])),
    "cpuid": (InstKind.other, set(), set(["%eax", "%ebx", "%ecx", "%edx"])),
    "crc32": (InstKind.other, set(["#0", "#1"]), set(["#1"])),
    "rdtsc": (InstKind.other, set(), set(["%edx", "%eax"])),
    "rdtscp": (InstKind.other, set(), set(["%edx", "%eax", "%ecx"])),
    "xgetbv": (InstKind.other, set(), set(["%edx", "%eax"])),
}

insts_tsx = {
    "xbegin": (InstKind.cjump, set(), set()),
    "xbeginq": (InstKind.cjump, set(), set()),
    "xabort": (InstKind.ujump, set(), set(["%eax"])),
    "xend": (InstKind.other, set(), set()),
    "xtest": (InstKind.other, set(), set(["%zf"])),
}

insts_meta = {
    "add":       (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta #0<#1>,#1"],
    ),
    "addb":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta #0<#1>,#1"],
    ),
    "addw":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta #0<#1>,#1"],
    ),
    "addl":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta #0<#1>,#1"],
    ),
    "addq":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta #0<#1>,#1"],
    ),
    "sub":       (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta -#0<#1>,#1"],
    ),
    "subb":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta -#0<#1>,#1"],
    ),
    "subw":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta -#0<#1>,#1"],
    ),
    "subl":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta -#0<#1>,#1"],
    ),
    "subq":      (InstKind.meta,
                  set(["#0", "#1"]),
                  set(["#1", "%of", "%sf", "%zf", "%af", "%cf", "%pf"]),
                  ["^ lea,meta -#0<#1>,#1"],
    ),
    "cmpxchg":   (InstKind.meta,
                  set(["#1", "%rax"]),
                  set(["%zf", "#1", "%rax"]),
                  ["^   lock.atomic               cmp %rax,#1",
                   "^1  lock.atomic               jne ^4",
                   "^2  lock.atomic.je.unlikely   mov #0,#1",
                   "^3  lock.atomic.je.unlikely   jmp ^5",
                   "^4  lock.atomic.jne.likely    mov #1,%rax",
                   "^5  lock.atomic               nop",],
    ),
    "cmpxchgb":  (InstKind.meta,
                  set(["#1", "%al"]),
                  set(["%zf", "#1", "%al"]),
                  ["^   lock.atomic               cmp %al,#1",
                   "^1  lock.atomic               jne ^4",
                   "^2  lock.atomic.je.unlikely   mov #0,#1",
                   "^3  lock.atomic.je.unlikely   jmp ^5",
                   "^4  lock.atomic.jne.likely    mov #1,%al",
                   "^5  lock.atomic               nop",],
    ),
    "cmpxchgw":  (InstKind.meta,
                  set(["#1", "%ax"]),
                  set(["%zf", "#1", "%ax"]),
                  ["^   lock.atomic               cmp %ax,#1",
                   "^1  lock.atomic               jne ^4",
                   "^2  lock.atomic.je.unlikely   mov #0,#1",
                   "^3  lock.atomic.je.unlikely   jmp ^5",
                   "^4  lock.atomic.jne.likely    mov #1,%ax",
                   "^5  lock.atomic               nop",],
    ),
    "cmpxchgl":  (InstKind.meta,
                  set(["#1", "%eax"]),
                  set(["%zf", "#1", "%eax"]),
                  ["^   lock.atomic               cmp %eax,#1",
                   "^1  lock.atomic               jne ^4",
                   "^2  lock.atomic.je.unlikely   mov #0,#1",
                   "^3  lock.atomic.je.unlikely   jmp ^5",
                   "^4  lock.atomic.jne.likely    mov #1,%eax",
                   "^5  lock.atomic               nop",],
    ),
    "cmpxchgq":  (InstKind.meta,
                  set(["#1", "%rax"]),
                  set(["%zf", "#1", "%rax"]),
                  ["^   lock.atomic               cmp %rax,#1",
                   "^1  lock.atomic               jne ^4",
                   "^2  lock.atomic.je.unlikely   mov #0,#1",
                   "^3  lock.atomic.je.unlikely   jmp ^5",
                   "^4  lock.atomic.jne.likely    mov #1,%rax",
                   "^5  lock.atomic               nop",],
    ),
    "cmpxchg8b": (InstKind.other,
                  set(["#0", "#1", "%edx", "%eax", "%ecx", "%ebx"]),
                  set(["%zf", "#1", "%edx", "%eax", "%ecx", "%ebx"]),
                  [], # TODO
    ),
    "cmpxchg16b": (InstKind.other,
                   set(["#0", "#1", "%rdx", "%rax", "%rcx", "%rbx"]),
                   set(["%zf", "#1", "%rdx", "%rax", "%rcx", "%rbx"]),
                   [], # TODO
    ),
    # TODO
    "cmova": (InstKind.simple_mov, set(["#0", "%cf", "%zf"]), set([]), set(["#1"])),
    "cmovae": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmovb": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmovbe": (InstKind.simple_mov, set(["#0", "%cf", "%zf"]), set([]), set(["#1"])),
    "cmovc": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmove": (InstKind.simple_mov, set(["#0", "%zf"]), set([]), set(["#1"])),
    "cmovg": (InstKind.simple_mov, set(["#0", "%zf", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovge": (InstKind.simple_mov, set(["#0", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovl": (InstKind.simple_mov, set(["#0", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovle": (InstKind.simple_mov, set(["#0", "%zf", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovna": (InstKind.simple_mov, set(["#0", "%cf", "%zf"]), set([]), set(["#1"])),
    "cmovnae": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmovnb": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmovnbe": (InstKind.simple_mov, set(["#0", "%cf", "%zf"]), set([]), set(["#1"])),
    "cmovnc": (InstKind.simple_mov, set(["#0", "%cf"]), set([]), set(["#1"])),
    "cmovne": (InstKind.simple_mov, set(["#0", "%zf"]), set([]), set(["#1"])),
    "cmovng": (InstKind.simple_mov, set(["#0", "%zf", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovnge": (InstKind.simple_mov, set(["#0", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovnl": (InstKind.simple_mov, set(["#0", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovnle": (InstKind.simple_mov, set(["#0", "%zf", "%sf", "%of"]), set([]), set(["#1"])),
    "cmovno": (InstKind.simple_mov, set(["#0", "%of"]), set([]), set(["#1"])),
    "cmovnp": (InstKind.simple_mov, set(["#0", "%pf"]), set([]), set(["#1"])),
    "cmovns": (InstKind.simple_mov, set(["#0", "%sf"]), set([]), set(["#1"])),
    "cmovnz": (InstKind.simple_mov, set(["#0", "%zf"]), set([]), set(["#1"])),
    "cmovo": (InstKind.simple_mov, set(["#0", "%of"]), set([]), set(["#1"])),
    "cmovp": (InstKind.simple_mov, set(["#0", "%pf"]), set([]), set(["#1"])),
    "cmovpe": (InstKind.simple_mov, set(["#0", "%pf"]), set([]), set(["#1"])),
    "cmovpo": (InstKind.simple_mov, set(["#0", "%pf"]), set([]), set(["#1"])),
    "cmovs": (InstKind.simple_mov, set(["#0", "%sf"]), set([]), set(["#1"])),
    "cmovz": (InstKind.simple_mov, set(["#0", "%zf"]), set([]), set(["#1"])),
    # TODO: rep, repe, repz, repne, repnz
}

insts_unknown = {
    "imul": (InstKind.unknown, set(), set()), # should be resolved further
    "ud2": (InstKind.unknown, set(), set()),  # undefined instruction
    "hlt": (InstKind.unknown, set(), set()),  # system halt
}

insts_list = [
    insts_unknown,
    insts_other_no_side_effect,
    insts_other_data_transfer,
    insts_other_arithmetic,
    insts_other_shift_rotate,
    insts_other_bit_byte,
    insts_other_string,
    insts_other_flags,
    insts_other_misc,
    insts_simple_move,
    insts_tsx,
    insts_fcall,
    insts_fcall_syscall,
    insts_freturn,
    insts_ujump,
    insts_cjump,
    insts_meta,
]

INST_INFO = dict((k, v) for d in insts_list for k, v in d.items())
# NOTE:
#  We have to rewrite inst_info with REG_RENAME_TBL.
#  But there is no such cases, using conflicting register name (e.g., %r8b),
#  in x86 instruction information.

INST_VOPD_SET = set([
    "imul",
    "shr",
    "shl",
    "sar",
    "sal",
    "rcl",
    "rcr",
    "rol",
    "ror"])
