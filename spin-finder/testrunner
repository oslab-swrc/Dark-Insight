#!/usr/bin/env python3
"""
Testcase runner of Spinfinder
"""
import os
import string
import argparse
import multiprocessing
import logging
from spnf.utils.debug import *
from spnf.utils.disasm import *
from spnf.utils.cache import *
from spnf.utils.bin_utils import *
from spnf.utils.tc import *
from spnf.analysis.asm_parser import *
from spnf.analysis.cfg import *
from spnf.analysis.loop import *
from spnf.analysis.sync_loop import *

log = logging.getLogger(__name__)

def init_log(debug_on):
    """Initialize logging"""
    logging.basicConfig(level="DEBUG" if debug_on else "INFO")

def load_test_cases(paths):
    """Load test cases"""
    ts = Testsuite()
    for path in paths:
        ts.load_tc_path(path)
    return ts

def run_test_cases(ts, cfg_on):
    """Run test cases"""
    for tc in ts.testcases:
        fn = tc.filename
        tc_outs = []
        with open(fn) as fd:
            log.debug("FILE ============================================")
            log.debug(fn)
            parser = AsmParser(fd)
            for func in parser.parse_func():
                log.debug("  FUNC --------------------------------------")
                log.debug("  %s" % func)
                tc_ranges = find_sync_loop_ranges(func, debug_vis = cfg_on)
                for tc_range in tc_ranges:
                    tc_out = tc_range.str_demangle_opt(False)
                    tc_outs.append(tc_out)
        tc.check(tc_outs)
        tc.print_result()

def parse_option():
    """Parse command line opetion"""
    # parse option
    parser = argparse.ArgumentParser(description="Run test cases")
    parser.add_argument('--cfg',   '-c', action='store_true', default=False,
                        help="show CFG")
    parser.add_argument('--debug', '-d', action='store_true', default=False,
                        help="show debug log")
    parser.add_argument('paths', metavar='P', nargs='+',
                        help="a list of file or directory")
    args = parser.parse_args()
    if len(args.paths) == 0:
        parser.print_help()
        exit(1)
    return args

def main():
    args = parse_option()
    init_log(args.debug)
    testsuit = load_test_cases(args.paths)
    run_test_cases(testsuit, args.cfg)

if  __name__ == "__main__":
    install_pdb()
    main()
